import { EthAddress } from "./types";
export declare const listAddr: {
    [x: number]: {
        LiquidityCampaignClaimRewards: string;
        LiquidityCampaignRedeem: string;
        LiquidityCampaignStake: string;
        GranarySupply: string;
        GranaryBorrow: string;
        GranaryRepay: string;
        GranaryWithdraw: string;
        RadiantSupply: string;
        RadiantBorrow: string;
        RadiantRepay: string;
        RadiantWithdraw: string;
        WePiggySupply: string;
        WePiggyBorrow: string;
        WePiggyRepay: string;
        WePiggyWithdraw: string;
        LiqeeSupply: string;
        LiqeeBorrow: string;
        LiqeeRepay: string;
        LiqeeWithdraw: string;
        CreamSupply: string;
        CreamBorrow: string;
        CreamRepay: string;
        CreamWithdraw: string;
        VenusWithdraw: string;
        VenusRepay: string;
        VenusBorrow: string;
        VenusSupply: string;
        TravaNFTExpeditionWithdraw: string;
        TravaNFTExpeditionDeploy: string;
        TravaNFTExpeditionAbandon: string;
        TravaNFTVeTravaBuy: string;
        TravaNFTVeTravaCreateSale: string;
        TravaNFTVeTravaCancelSale: string;
        TravaNFTHeuristicFarmingPolish: string;
        TravaNFTHeuristicFarmingWithdraw: string;
        TravaNFTHeuristicFarmingClaimReward: string;
        TravaNFTHeuristicFarmingStake: string;
        TravaAuctionCreateAuction: string;
        TravaAuctionMakeBid: string;
        RecipeExecutor: string;
        DFSProxyRegistry: string;
        TravaNFTTransfer: string;
        TravaNFTBuy: string;
        TravaNFTCreateSale: string;
        TravaNFTCancelSale: string;
        TravaNFTAuctionCancelAuction: string;
        TravaNFTAuctionCreateAuction: string;
        TravaNFTAuctionEditAuctionPrice: string;
        TravaNFTAuctionFinalizeAuction: string;
        TravaNFTAuctionMakeBid: string;
        PancakeSwapV2: string;
        PullToken: string;
        WrapBnb: string;
        UnwrapBnb: string;
        SendToken: string;
        SendTokenAndUnwrap: string;
        SendTokens: string;
        TravaSupply: string;
        TravaBorrow: string;
        TravaRepay: string;
        TravaWithdraw: string;
        TravaClaimRewards: string;
        TravaConvertRewards: string;
        TravaStakingStake: string;
        TravaStakingRedeem: string;
        TravaStakingClaimRewards: string;
        RouterAddress: string;
        FactoryAddress: string;
        BNBAddress: string;
        WBNBAddress: string;
        USDCAddress: string;
        USDTAddress: string;
        DAIAddress: string;
        ETHAddress: string;
        XVSAddress: string;
        DOTAddress: string;
        AAVEAddress: string;
        ADAAddress: string;
        CAKEAddress: string;
        XRPAddress: string;
        DOGEAddress: string;
        TRAVAAddress: string;
        BUSDAddress: string;
        TODAddress: string;
        LiquidityCampaignBuyToken: string;
        VenusSupplyGateWay?: undefined;
        VenusCollateral?: undefined;
    } | {
        VenusWithdraw: string;
        VenusRepay: string;
        VenusBorrow: string;
        VenusSupply: string;
        VenusSupplyGateWay: string;
        VenusCollateral: string;
        DFSProxyRegistry: string;
        RecipeExecutor: string;
        TravaAuctionCreateAuction: string;
        TravaAuctionMakeBid: string;
        TravaNFTTransfer: string;
        TravaNFTBuy: string;
        TravaNFTCreateSale: string;
        TravaNFTCancelSale: string;
        TravaNFTAuctionCancelAuction: string;
        TravaNFTAuctionCreateAuction: string;
        TravaNFTAuctionEditAuctionPrice: string;
        TravaNFTAuctionFinalizeAuction: string;
        TravaNFTAuctionMakeBid: string;
        PancakeSwapV2: string;
        PullToken: string;
        WrapBnb: string;
        UnwrapBnb: string;
        SendToken: string;
        SendTokenAndUnwrap: string;
        SendTokens: string;
        TravaSupply: string;
        TravaBorrow: string;
        TravaRepay: string;
        TravaWithdraw: string;
        TravaClaimRewards: string;
        TravaConvertRewards: string;
        TravaStakingStake: string;
        TravaStakingRedeem: string;
        TravaStakingClaimRewards: string;
        RouterAddress: string;
        FactoryAddress: string;
        BNBAddress: string;
        WBNBAddress: string;
        TODAddress: string;
        BUSDAddress: string;
        TRAVAAddress: string;
        LiquidityCampaignBuyToken: string;
        LiquidityCampaignClaimRewards?: undefined;
        LiquidityCampaignRedeem?: undefined;
        LiquidityCampaignStake?: undefined;
        GranarySupply?: undefined;
        GranaryBorrow?: undefined;
        GranaryRepay?: undefined;
        GranaryWithdraw?: undefined;
        RadiantSupply?: undefined;
        RadiantBorrow?: undefined;
        RadiantRepay?: undefined;
        RadiantWithdraw?: undefined;
        WePiggySupply?: undefined;
        WePiggyBorrow?: undefined;
        WePiggyRepay?: undefined;
        WePiggyWithdraw?: undefined;
        LiqeeSupply?: undefined;
        LiqeeBorrow?: undefined;
        LiqeeRepay?: undefined;
        LiqeeWithdraw?: undefined;
        CreamSupply?: undefined;
        CreamBorrow?: undefined;
        CreamRepay?: undefined;
        CreamWithdraw?: undefined;
        TravaNFTExpeditionWithdraw?: undefined;
        TravaNFTExpeditionDeploy?: undefined;
        TravaNFTExpeditionAbandon?: undefined;
        TravaNFTVeTravaBuy?: undefined;
        TravaNFTVeTravaCreateSale?: undefined;
        TravaNFTVeTravaCancelSale?: undefined;
        TravaNFTHeuristicFarmingPolish?: undefined;
        TravaNFTHeuristicFarmingWithdraw?: undefined;
        TravaNFTHeuristicFarmingClaimReward?: undefined;
        TravaNFTHeuristicFarmingStake?: undefined;
        USDCAddress?: undefined;
        USDTAddress?: undefined;
        DAIAddress?: undefined;
        ETHAddress?: undefined;
        XVSAddress?: undefined;
        DOTAddress?: undefined;
        AAVEAddress?: undefined;
        ADAAddress?: undefined;
        CAKEAddress?: undefined;
        XRPAddress?: undefined;
        DOGEAddress?: undefined;
    };
};
/**
 *
 * @param name
 * @param chainId
 */
export declare const getAddr: (name: string, chainId?: number) => EthAddress;
export declare const convertHexStringToAddress: (hexString: EthAddress) => EthAddress;
