import type { EthAddress, Config, Network, Networks, bytes32, bytes, uint256, uint160, uint128, uint80, uint64, uint24, uint16, uint8, int24 } from './types';
import { Action } from './Action';
import { Recipe } from './Recipe';
import { DfsWeb3 } from './DfsWeb3';
import * as actions from './actions';
import { configure, getNetworkData, CONFIG, NETWORKS as networks } from './config';
import { getAddr } from './addresses';
export type { EthAddress, Config, Network, Networks, bytes32, bytes, uint256, uint160, uint128, uint80, uint64, uint24, uint16, uint8, int24, };
declare const actionAddressesAllChains: {
    [x: number]: {
        TravaAuctionCreateAuction: string;
        TravaAuctionMakeBid: string;
        RecipeExecutor: string;
        DFSProxyRegistry: string;
        TravaNFTTransfer: string;
        TravaNFTBuy: string;
        TravaNFTCreateSale: string;
        PancakeSwapV2: string;
        PullToken: string;
        WrapBnb: string;
        UnwrapBnb: string;
        SendToken: string;
        SendTokenAndUnwrap: string;
        SendTokens: string;
        TravaSupply: string;
        TravaBorrow: string;
        TravaRepay: string;
        TravaWithdraw: string;
        TravaStakingStake: string;
        TravaNFTCancelSale: string;
    };
};
declare const actionAddresses: (chainId?: null) => {
    TravaAuctionCreateAuction: string;
    TravaAuctionMakeBid: string;
    RecipeExecutor: string;
    DFSProxyRegistry: string;
    TravaNFTTransfer: string;
    TravaNFTBuy: string;
    TravaNFTCreateSale: string;
    PancakeSwapV2: string;
    PullToken: string;
    WrapBnb: string;
    UnwrapBnb: string;
    SendToken: string;
    SendTokenAndUnwrap: string;
    SendTokens: string;
    TravaSupply: string;
    TravaBorrow: string;
    TravaRepay: string;
    TravaWithdraw: string;
    TravaStakingStake: string;
    TravaNFTCancelSale: string;
};
export { Action, Recipe, DfsWeb3, actions, configure, getNetworkData, CONFIG, networks, actionAddresses, actionAddressesAllChains, getAddr, };
declare const _default: {
    Action: typeof Action;
    Recipe: typeof Recipe;
    DfsWeb3: typeof DfsWeb3;
    actions: typeof actions;
    configure: (config: Config) => void;
    getNetworkData: (chainId: number) => Network;
    CONFIG: Config;
    networks: Networks;
    actionAddresses: (chainId?: null) => {
        TravaAuctionCreateAuction: string;
        TravaAuctionMakeBid: string;
        RecipeExecutor: string;
        DFSProxyRegistry: string;
        TravaNFTTransfer: string;
        TravaNFTBuy: string;
        TravaNFTCreateSale: string;
        PancakeSwapV2: string;
        PullToken: string;
        WrapBnb: string;
        UnwrapBnb: string;
        SendToken: string;
        SendTokenAndUnwrap: string;
        SendTokens: string;
        TravaSupply: string;
        TravaBorrow: string;
        TravaRepay: string;
        TravaWithdraw: string;
        TravaStakingStake: string;
        TravaNFTCancelSale: string;
    };
    actionAddressesAllChains: {
        [x: number]: {
            TravaAuctionCreateAuction: string;
            TravaAuctionMakeBid: string;
            RecipeExecutor: string;
            DFSProxyRegistry: string;
            TravaNFTTransfer: string;
            TravaNFTBuy: string;
            TravaNFTCreateSale: string;
            PancakeSwapV2: string;
            PullToken: string;
            WrapBnb: string;
            UnwrapBnb: string;
            SendToken: string;
            SendTokenAndUnwrap: string;
            SendTokens: string;
            TravaSupply: string;
            TravaBorrow: string;
            TravaRepay: string;
            TravaWithdraw: string;
            TravaStakingStake: string;
            TravaNFTCancelSale: string;
        };
    };
    getAddr: (name: string, chainId?: number) => string;
};
export default _default;
//# sourceMappingURL=index.d.ts.map